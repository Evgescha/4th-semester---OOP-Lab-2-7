Task 2

Задания к работе: 
 
1. Вычислить  выражение  используя  оператор 
условия. Ответ 0,69. 
2. Для произвольной цифры от 0 до 9 вывести на консоль ее значение прописью. 
Например, для цифры 9 на консоли должна быть напечатана строка «Девять». 
3. Задание  обратное  первому:  при  вводе  слов,  обозначающих  цифры  от  0  до 
9  -  отображать  их  числовое  значение.  Например,  при  вводе  слова 
"девять"  -  отображать  в  консоле  цифру  9.  (Информацию  о  работе  со  строками  вы 
найдете на следующих страницах). 
4. Дан массив из целых чисел A(n), где n=1,25. Необходимо поменять местами 
его  максимальный  и  минимальный  элемент  и  вывести  отдельно  максимальный 
элемент (с помощью описания нового метода, например maxX()). 
5. Дан массив из целых чисел B(n), где n=1,25. Необходимо упорядочить массив 
по возрастанию. 
6. Дан  массив  из  целых  чисел  С(n),  где  n=1,20.  Необходимо  найти  среднее 
значение и вывести его на консоль. 
7. Дан  массив  из  целых  чисел  D(n),  где  n=1,30.  Посчитайте  сумму  четных  и 
нечетных элементов массива. 
8. Напишите  программу,  выводящую  на  консоль  таблицу  3х5  случайных 
элементов (a(i,j)< 10). 
9. Даны 5 строк s1, s2, s3, s4 и s5, на основе условия: если строка s4 равна строке 
s5, нужно сложить строки s1 и s2, иначе нужно сложить строки s1 и s3.






Task 3

3.1. Создайте  класс  Rectangle,  представляющий  прямоугольник,  экземпляры 
которого обладают четырьмя полями целого типа  (x1, y1) (левый верхний угол), (x2, 
y2)  (правый  нижний  угол).  Для  данного  класса  создать  три  конструктора,  которые 
инициализируют поля следующим образом: 
  конструктор принимает 4 параметра целого типа и присваивает их значения 
полям (x1, y1), (x2, y2); 
  конструктор  принимает  2  параметра  целого  типа  –  ширину  и  высоту 
прямоугольника, а левый верхний угол прямоугольника помещает в координату (0,0); 
  конструктор  не  принимает  никаких  параметров  –  создает  вырожденный 
прямоугольник с координатами углов (0,0) и (0,0). 
В классе Rectangle перегрузить метод toString(), выдающий текущее состояние 
экземпляра  прямоугольника  (значение  полей).  Создать метод  move  (int  dx, int dy), 
перемещающий  прямоугольник  по  горизонтали  на  заданное  dx,  по  вертикали  на 
заданное  dy.  Создать  метод  minSquare  (подумать  какие  входные  параметры), 
возвращающий  прямоугольник  с  минимальной  площадью  по  сравнению  с  другим 
прямоугольником. 
Протестируйте  в  ней  поведение  экземпляров  класса  Rectangle  следующим 
образом:  создайте  три  объекта  Rectangle  тремя  различными  созданными 
конструкторами,  выведите  состояние  всех  трех  объектов.  Воспользуйтесь  вызовом 
функции  move(…)  с  различными  значениями  параметров  для  каждого  объекта  и 
выведите  новое  положение  созданных  прямоугольников.  Протестируйте  работу 
функции minSquare(…) на одном примере. 
 
3.2. Расширьте класс Rectangle новым классом DrawRect, у которого есть  метод 
отображения цвета границы прямоугольника –  draw(String  outColor)  и  поле  outColor 
с  типом  данных  String  (название  цвета  границы  прямоугольника)  –  вводится  с 
клавиатуры.  Это поле служит  для задания цвета границы прямоугольника. 
 
3.3. Расширьте  класс  DrawRect  новым  классом  ColoredRect,  в  котором  есть 
поле  inColor  с  типом  String  (название  цвета  прямоугольника)  –  вводится  с 
клавиатуры.  Метод  отображения цветов прямоугольника draw(String outColor, String 
inColor)  перекрывается  следующим  образом: информация о цветах прямоугольника 
отображается следующим образом: граница  цветом outColor, внутренность – inColor. 
 
Для  тестирования  функции  draw(…)  выведите  прямоугольник  при  помощи 
первого конструктора с отображением внутреннего цвета и цвета границы. 









Task 4
Используя ключевые слова try, catch, throw, throws и finally для обработки 
исключений в JAVA выполнить следующие задания: 
2.1 Необходимо в реализованный в рамках лабораторной работы №2.2 проект 
реализовать обработку исключений ввода некорректных данных. 
2.2 В лабораторной работе №2, в задании №2.3 – реализовать обработку 
следующих исключений: 
  ArrayIndexOutOfBoundsException (попытка адресовать элементы за 
пределами массива); 
  NegativeArraySizeException (исключение возникает при попытке создать 
массив отрицательного размера); 
  StringIndexOutOfBoundsException (указание позиции, лежащей за границей 
строки). 
2.3  Необходимо  в  реализованный  в  рамках  лабораторной  работы  №3  класс 
реализовать следующие изменения: 
2.3.1  Необходимо  в  класс  добавить  метод  inCons()  ввода  значений  полей 
класса с клавиатуры. Значения необходимо ввести в переменные типа String, а 
затем перобразовать их к числовому виду методами parseInt(), parseDouble(). В 
процессе  преобразования  необходимо  обработать  исключение  "не  число" 
(NumberFormatException). 
2.3.2  В  методах,  требующих  вычисления,  добавить  обработку  исключений, 
связанных  с  некорректными  числовыми  значениями  (которые  возвращают  +/- 
Infinity).  В  случае  возникновения  исключения  вывести  соответствующее 
сообщение на экран. 
2.3.3  Предусмотреть  другие  исключительные  ситуации  (создать 
соответствующие  классы),  которые  генерируются  программой  в  случае 
невозможности  корректного  выполнения  запрограммированной  операции  с 
объектом класса






Task 5

 
2.1. Создание текстового файла 
  Создать с помощью программы на Java текстовый файл sin.txt. Записать в 
файл  построчно  угол  и  значение  синуса  данного  угла,  разделенные 
пробелом.  Углы  от  0  до  360  градусов  с  шагом  в  1  градус.  Обязательно 
использование класса PrintWriter; 
  Создать  с  помощью  текстового  редактора  файл  input.txt,  содержащий 
одну строку с числом в интервале от 0 до 360. 
 
2.2. Чтение текстового файла 
  Создать двухмерный массив типа double (или два массива) и прочитать в 
него значения углов и их синусов из файла sin.txt; 
  Прочитать значение угла из файла input.txt и вывести на экран значение 
соответствующего элемента массива. 
 
2.3. Сериализация 
  При  помощи  механизма  сериализации  сохранить  созданный  массив 
целиком в файл sin2.dat; 
  Создать  новый  массив  чисел  типа  double  и  при  помощи  механизма 
сериализации прочитать массив из файла sin2.dat. 
 
2.4. Работа с содержимым файла 
  Вывести в консоль, сколько строк файла имеет четную длину; 
  Вывести  в  консоль  количество  чисел,  у  которых  дробные  части 
превышают 0,5. 
2.5. Документирование кода на языке Java 
  Сделать документацию по всем созданным в лабораторной работе классам. 




Task 6

4.1 Ввести  строки  из  файла,  записать  их  в  стек.  Вывести  строки  в  файл  в 
обратном порядке; 
4.2 Сложить и умножить два многочлена заданной степени, если коэффициенты 
многочленов хранятся в объекте HashMap; 
4.3 Задать два стека, поменять информацию местами; 
4.4  Ввести строки из файла и записать их в список. При вводе слова (в любом 
рЕГИстРе) необходимо проверить, содержится ли оно в списке. 




Task 7


2.1. Реализовать многопоточное приложение, производящее тестирование целых 
чисел типа long на простоту в заданном диапазоне (вводится с клавиатуры). Главный 
поток приложения формирует пропорциональные последовательности чисел  (от  5) и 
создает для каждого отдельный поток обработки. 
Самый простой путь определения простых чисел – проверить, имеет ли данное 
число n (n >= 2) делители в интервале [2; n-1]. Если делители есть, число n – составное, 
если  –  нет,  то  –  простое.  При  реализации  алгоритма  разумно  делать  проверку  на 
четность  введенного  числа,  поскольку  все  четные  числа  делятся  на  2  и  являются 
составными числами, то, очевидно, что нет необходимости искать делители для этих 
чисел. 
2.2.  Реализовать  многопоточное  приложение,  реализующее  поиск  подстроки  в 
файлах.  Список  файлов  передается  в  качестве  параметра  командной  строки.  Для 
каждого файла выделяется отдельный поток. Для вывода результатов поиска в консоль 
создается  отдельный  поток,  считывающий  данные  по  мере  поступления  из 
разделяемого списка объектов класса SearchResult, имеющего следующего поля «имя 
файла», «индекс вхождения». 
2.3.  Реализовать  многопоточное  приложение,  реализующее  вывод  всех  четных 
слов из списка файлов. Для каждого файла создается новый поток.
